
버전관리를 한다는 건 어떤의미일까
버전관리를 한다는 것은 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 commit 을 사용해서 버전이 달라지는 것을 관리합니다
컴퓨터에 있는 프로젝트를 Git 이 관리하는 프로젝트로 만들 수 있습니다. 앞으로 Git 으로 관리할꺼야! 하고 설정해주면 됩니다. 이 작업을 **git 초기화(git initialize)**한다고 표현합니다.
현재 프로젝트의 상태를 찰칵 📸 저장하는 것을 commit 이라고 합니다.

작업내용 단위인 커밋에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까
누가(author), 언제 commit 했는지의 정보와 프로젝트 변경 내용
작업내역이 어떤 것인지 알아볼 수 있게 적는 메시지를 'commit 메시지'라고 합니다.
commit 에 반영할지 안할지는 파일 단위로 선택할 수 있습니다. commit 에 반영할 파일을 선택하는 것을 add (혹은 staging, 스테이징) 이라고 합니다.
commit 한 기록은 history 로 볼 수 있습니다.


지금까지 우리가 실습은 어떤순서로 했었지
지금까지 우리가 한 작업은 'git 초기화하기(initialize) - add(staging) - commit' 입니다.
git 초기화는 처음에 단 한번만 해 주면 됩니다. 작업 내역을 저장하기 위해서는 add - commit 만 하면 됩니다.



원격 repo 와 로컬 repo 를 연결해서 내용을 반영하고 싶을 땐 어떤 방법을 써야할까?
로컬 repo 가 없고 원격 repo 에 있는 내용을 가져오고 싶을 때는 clone 한다.
원격 repo 와 로컬 repo 둘 다 있고 두 개를 연결하고 싶을 때는 로컬 repo 가 원격 repo를 tracking 하도록 설정한다.

원격 repo 와 로컬 repo 는 왜 따로 있을까?
협업할 때, 혹은 여러 컴퓨터를 사용한다면 하나의 원격 repo 에 여러 로컬 repo 를 연결시킬 수 있다. 하나의 프로젝트를 동시에 작업하는게 가능해진다.

push 와 pull 의 개념을 원격 repo와 로컬 repo 를 포함해 그림으로 그려보세요.
https://www.notion.so/Git-1-3cb2c0d54a9743898d2420d8e075a286

테스트
